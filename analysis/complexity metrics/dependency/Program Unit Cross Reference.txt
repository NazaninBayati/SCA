                                                                     Page 57
                      Program Unit Cross Reference Report
===============================================================================

append   (Unknown Member Function)
    Call [util.cpp, 294]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [util.cpp, 294]             couch_error(JSContext *cx,JSErrorReport *report)

arg0   (Unknown Function)
    Call [util.cpp, 291]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 294]          couch_error(JSContext *cx,JSErrorReport *report)

assert   (Unknown Function)
    Call [couch_ejson_compare.c, 90]   get_collator

atoi   (Unknown Function)
    Call [couchspawnkillable_win.c, 119]   main(int argc,char **argv)
    Call [util.c, 94]                couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 136]             couch_parse_args(int argc,const char *[] argv)

atom_sort_order(ErlNifEnv *env,ERL_NIF_TERM a)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 62]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 151]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 156]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Define [couch_ejson_compare.c, 244]   couch_ejson_compare.c

base_url(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 169]           main.cpp
    Pointer [main.cpp, 356]          main.cpp

base_url(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 144]             main.c
    Pointer [main.c, 322]            main.c

begin   (Unknown Member Function)
    Call [utf8.cpp, 147]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [main.cpp, 238]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

BooleanValue   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 107]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 201]             NewSandbox(JSContext *cx,bool lazy)

c_str   (Unknown Member Function)
    Call [util.cpp, 56]              string_to_js(JSContext *cx,const std::string & s)
    Call [util.cpp, 270]             couch_error(JSContext *cx,JSErrorReport *report)

CallArgsFromVp   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 88]              req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 103]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 123]             req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
                                                                     Page 58
                      Program Unit Cross Reference Report
===============================================================================
    Call [main.cpp, 141]             req_send(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 157]             req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 171]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 216]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 275]             gc(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 285]             print(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 295]             quit(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 306]             readline(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 323]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 341]             js_sleep(JSContext *cx,unsigned int argc,JS::Value *vp)

chars   (Unknown Function)
    Call [util.cpp, 30]              js_to_string(JSContext *cx,JS::HandleValue val)
    Pointer [util.cpp, 31]           js_to_string(JSContext *cx,JS::HandleValue val)
    Return [util.cpp, 37]            js_to_string(JSContext *cx,JS::HandleValue val)
    Call [util.cpp, 43]              js_to_string(JSContext *cx,JSString *str)
    Pointer [util.cpp, 44]           js_to_string(JSContext *cx,JSString *str)
    Return [util.cpp, 50]            js_to_string(JSContext *cx,JSString *str)

CloseHandle   (Unknown Function)
    Call [couchspawnkillable_win.c, 124]   main(int argc,char **argv)

compare_lists(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 64]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 211]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Define [couch_ejson_compare.c, 259]   couch_ejson_compare.c

compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 65]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 239]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Define [couch_ejson_compare.c, 296]   couch_ejson_compare.c

compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 63]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 196]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 339]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Define [couch_ejson_compare.c, 360]   couch_ejson_compare.c

couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)   (Static Function)
  Declared as: ErlDrvSSizeT
    Define [couch_icu_driver.c, 98]   couch_icu_driver.c
    Pointer [couch_icu_driver.c, 166]   couch_icu_driver.c
                                                                     Page 59
                      Program Unit Cross Reference Report
===============================================================================

couch_drv_start(ErlDrvPort port,char *buff)   (Static Function)
  Declared as: ErlDrvData
    Define [couch_icu_driver.c, 52]   couch_icu_driver.c
    Pointer [couch_icu_driver.c, 158]   couch_icu_driver.c

couch_drv_stop(ErlDrvData data)   (Static Function)
  Declared as: void
    Define [couch_icu_driver.c, 40]   couch_icu_driver.c
    Call [couch_icu_driver.c, 64]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_icu_driver.c, 70]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_icu_driver.c, 76]    couch_drv_start(ErlDrvPort port,char *buff)
    Pointer [couch_icu_driver.c, 159]   couch_icu_driver.c

couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)   (Function)
  Declared as: void
    Define [util.c, 235]             util.c
    Declare [util.h, 33]             util.h
    Pointer [main.c, 398]            main(int argc,const char *[] argv)

couch_error(JSContext *cx,JSErrorReport *report)   (Function)
  Declared as: void
    Define [util.cpp, 262]           util.cpp
    Pointer [main.cpp, 426]          main(int argc,const char *[] argv)
    Declare [util.h, 37]             util.h

couch_fgets(char *buf,int size,FILE *fp)   (Function)
  Declared as: int
    Define [util.c, 123]             util.c
    Call [util.c, 156]               couch_readline(JSContext *cx,FILE *fp)
    Declare [util.h, 29]             util.h

couch_fgets(char *buf,int size,FILE *fp)   (Function)
  Declared as: int
    Define [util.cpp, 165]           util.cpp
    Call [util.cpp, 199]             couch_readline(JSContext *cx,FILE *fp)
    Declare [util.h, 33]             util.h

couch_load_funcs(JSContext *cx,JSObject *obj,JSFunctionSpec *funcs)   (Function)
  Declared as: JSBool
    Define [util.c, 288]             util.c
    Declare [util.h, 34]             util.h
    Call [main.c, 420]               main(int argc,const char *[] argv)
    Call [main.c, 443]               main(int argc,const char *[] argv)

couch_load_funcs(JSContext *cx,JS::HandleObject obj,JSFunctionSpec *funcs)   (Function)
  Declared as: bool
    Define [util.cpp, 321]           util.cpp
    Call [main.cpp, 443]             main(int argc,const char *[] argv)
    Call [main.cpp, 466]             main(int argc,const char *[] argv)
    Declare [util.h, 39]             util.h

couch_oom(JSContext *cx,void *data)   (Function)
  Declared as: void
    Define [util.cpp, 313]           util.cpp
    Pointer [main.cpp, 427]          main(int argc,const char *[] argv)
                                                                     Page 60
                      Program Unit Cross Reference Report
===============================================================================
    Declare [util.h, 38]             util.h

couch_parse_args(int argc,const char *[] argv)   (Function)
  Declared as: couch_args *
    Define [util.c, 70]              util.c
    Declare [util.h, 28]             util.h
    Call [main.c, 388]               main(int argc,const char *[] argv)

couch_parse_args(int argc,const char *[] argv)   (Function)
  Declared as: couch_args *
    Define [util.cpp, 112]           util.cpp
    Call [main.cpp, 413]             main(int argc,const char *[] argv)
    Declare [util.h, 32]             util.h

couch_print(JSContext *cx,uintN argc,jsval *argv)   (Function)
  Declared as: void
    Define [util.c, 214]             util.c
    Declare [util.h, 32]             util.h
    Call [main.c, 229]               print(JSContext *cx,uintN argc,jsval *vp)

couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)   (Function)
  Declared as: void
    Define [util.cpp, 241]           util.cpp
    Call [main.cpp, 286]             print(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [util.h, 36]             util.h

couch_readfile(JSContext *cx,const char *filename)   (Function)
  Declared as: JSString *
    Define [util.c, 197]             util.c
    Declare [util.h, 31]             util.h
    Call [main.c, 449]               main(int argc,const char *[] argv)

couch_readfile(const char *file,char **outbuf_p)   (Function)
  Declared as: size_t
    Define [util.cpp, 66]            util.cpp
    Call [main.cpp, 471]             main(int argc,const char *[] argv)
    Declare [util.h, 35]             util.h

couch_readline(JSContext *cx,FILE *fp)   (Function)
  Declared as: JSString *
    Define [util.c, 144]             util.c
    Declare [util.h, 30]             util.h
    Call [main.c, 253]               readline(JSContext *cx,uintN argc,jsval *vp)

couch_readline(JSContext *cx,FILE *fp)   (Function)
  Declared as: JSString *
    Define [util.cpp, 186]           util.cpp
    Call [main.cpp, 311]             readline(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [util.h, 34]             util.h

create_child(int argc,char **argv,PROCESS_INFORMATION *pi)   (Function)
  Declared as: int
    Define [couchspawnkillable_win.c, 54]   couchspawnkillable_win.c
    Call [couchspawnkillable_win.c, 128]   main(int argc,char **argv)
                                                                     Page 61
                      Program Unit Cross Reference Report
===============================================================================

CreateProcess   (Unknown Function)
    Call [couchspawnkillable_win.c, 97]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)

creationOptions   (Unknown Member Function)
    Call [main.cpp, 183]             SetStandardCompartmentOptions(JS::CompartmentOptions & options)

csp_allows(JSContext *cx)   (Static Function)
  Declared as: bool
    Define [main.cpp, 387]           main.cpp
    Pointer [main.cpp, 399]          main.cpp

csp_allows(JSContext *cx)   (Static Function)
  Declared as: JSBool
    Define [main.c, 353]             main.c
    Pointer [main.c, 368]            main.c

dec_char(const uint8 *utf8Buffer,int utf8Length)   (Static Function)
  Declared as: uint32
    Define [utf8.c, 165]             utf8.c
    Call [utf8.c, 228]               dec_charbuf(const char *src,size_t srclen,jschar *dst,size_t *dstlenp)

dec_char(const uint8_t *utf8Buffer,int utf8Length)   (Static Function)
  Declared as: uint32_t
    Define [utf8.cpp, 169]           utf8.cpp
    Call [utf8.cpp, 232]             dec_charbuf(const char *src,size_t srclen,char16_t *dst,size_t *dstlenp)

dec_charbuf(const char *src,size_t srclen,jschar *dst,size_t *dstlenp)   (Static Function)
  Declared as: JSBool
    Define [utf8.c, 197]             utf8.c
    Call [utf8.c, 278]               dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [utf8.c, 284]               dec_string(JSContext *cx,const char *bytes,size_t byteslen)

dec_charbuf(const char *src,size_t srclen,char16_t *dst,size_t *dstlenp)   (Static Function)
  Declared as: bool
    Define [utf8.cpp, 201]           utf8.cpp
    Call [utf8.cpp, 282]             dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [utf8.cpp, 288]             dec_string(JSContext *cx,const char *bytes,size_t byteslen)

dec_string(JSContext *cx,const char *bytes,size_t byteslen)   (Function)
  Declared as: JSString *
    Define [utf8.c, 272]             utf8.c
    Declare [utf8.h, 17]             utf8.h
    Call [util.c, 190]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.c, 204]               couch_readfile(JSContext *cx,const char *filename)

dec_string(JSContext *cx,const char *bytes,size_t byteslen)   (Function)
  Declared as: JSString *
    Define [utf8.cpp, 276]           utf8.cpp
    Declare [utf8.h, 17]             utf8.h

driver_alloc   (Unknown Function)
    Call [couch_icu_driver.c, 55]    couch_drv_start(ErlDrvPort port,char *buff)

driver_alloc_binary   (Unknown Function)
    Call [couch_icu_driver.c, 88]    return_control_result(void *pLocalResult,int localLen,char **ppRetBuf,ErlDrvSizeT returnLen)
                                                                     Page 62
                      Program Unit Cross Reference Report
===============================================================================

driver_free   (Unknown Function)
    Call [couch_icu_driver.c, 49]    couch_drv_stop(ErlDrvData data)

DRIVER_INIT( couch_icu_driver)   (Function)
    Define [couch_icu_driver.c, 181]   couch_icu_driver.c

DuplicateHandle   (Unknown Function)
    Call [couchspawnkillable_win.c, 71]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 78]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 87]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)

emplace   (Unknown Member Function)
    Call [main.cpp, 254]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

enc_char(uint8 *utf8Buffer,uint32 ucs4Char)   (Static Function)
  Declared as: int
    Define [utf8.c, 17]              utf8.c
    Call [utf8.c, 106]               enc_charbuf(const jschar *src,size_t srclen,char *dst,size_t *dstlenp)

enc_char(uint8_t *utf8Buffer,uint32_t ucs4Char)   (Static Function)
  Declared as: int
    Define [utf8.cpp, 21]            utf8.cpp
    Call [utf8.cpp, 110]             enc_charbuf(const char16_t *src,size_t srclen,char *dst,size_t *dstlenp)

enc_charbuf(const jschar *src,size_t srclen,char *dst,size_t *dstlenp)   (Static Function)
  Declared as: JSBool
    Define [utf8.c, 48]              utf8.c
    Call [utf8.c, 146]               enc_string(JSContext *cx,jsval arg,size_t *buflen)
    Call [utf8.c, 151]               enc_string(JSContext *cx,jsval arg,size_t *buflen)

enc_charbuf(const char16_t *src,size_t srclen,char *dst,size_t *dstlenp)   (Static Function)
  Declared as: bool
    Define [utf8.cpp, 52]            utf8.cpp
    Call [utf8.cpp, 150]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [utf8.cpp, 155]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)

enc_string(JSContext *cx,jsval arg,size_t *buflen)   (Function)
  Declared as: char *
    Define [utf8.c, 128]             utf8.c
    Declare [utf8.h, 16]             utf8.h
    Call [util.c, 223]               couch_print(JSContext *cx,uintN argc,jsval *argv)
    Call [util.c, 277]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [main.c, 195]               evalcx(JSContext *cx,uintN argc,jsval *vp)

enc_string(JSContext *cx,JS::Value arg,size_t *buflen)   (Function)
  Declared as: char *
    Define [utf8.cpp, 132]           utf8.cpp

enif_alloc   (Unknown Function)
    Call [couch_ejson_compare.c, 402]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)

enif_compare   (Unknown Function)
    Call [couch_ejson_compare.c, 176]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 246]   atom_sort_order(ErlNifEnv *env,ERL_NIF_TERM a)
    Call [couch_ejson_compare.c, 248]   atom_sort_order(ErlNifEnv *env,ERL_NIF_TERM a)
                                                                     Page 63
                      Program Unit Cross Reference Report
===============================================================================
    Call [couch_ejson_compare.c, 250]   atom_sort_order(ErlNifEnv *env,ERL_NIF_TERM a)

enif_free   (Unknown Function)
    Call [couch_ejson_compare.c, 427]   on_unload(ErlNifEnv *env,void *priv_data)

enif_get_int   (Unknown Function)
    Call [couch_ejson_compare.c, 386]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)

enif_get_list_cell   (Unknown Function)
    Call [couch_ejson_compare.c, 267]   compare_lists(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 268]   compare_lists(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 307]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 308]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_get_tuple   (Unknown Function)
    Call [couch_ejson_compare.c, 221]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 230]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 321]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 330]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_inspect_binary   (Unknown Function)
    Call [couch_ejson_compare.c, 193]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 194]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 325]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 334]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_is_atom   (Unknown Function)
    Call [couch_ejson_compare.c, 144]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 145]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_is_binary   (Unknown Function)
    Call [couch_ejson_compare.c, 171]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 172]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 186]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 187]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_is_list   (Unknown Function)
    Call [couch_ejson_compare.c, 171]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 172]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 206]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 207]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 225]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 234]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_is_tuple   (Unknown Function)
    Call [couch_ejson_compare.c, 171]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 172]   less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

enif_make_atom   (Unknown Function)
    Call [couch_ejson_compare.c, 409]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)
    Call [couch_ejson_compare.c, 410]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)
    Call [couch_ejson_compare.c, 411]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)

enif_make_badarg   (Unknown Function)
    Call [couch_ejson_compare.c, 119]   less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)
                                                                     Page 64
                      Program Unit Cross Reference Report
===============================================================================

enif_make_int   (Unknown Function)
    Call [couch_ejson_compare.c, 119]   less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)

enif_mutex_create   (Unknown Function)
    Call [couch_ejson_compare.c, 396]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)

enif_mutex_destroy   (Unknown Function)
    Call [couch_ejson_compare.c, 405]   on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)
    Call [couch_ejson_compare.c, 433]   on_unload(ErlNifEnv *env,void *priv_data)

enif_mutex_lock   (Unknown Function)
    Call [couch_ejson_compare.c, 85]   get_collator

enif_mutex_unlock   (Unknown Function)
    Call [couch_ejson_compare.c, 88]   get_collator

ERL_NIF_INIT(couch_ejson_compare,nif_functions,& on_load,NULL,NULL,& on_unload)   (Function)
    Declare [couch_ejson_compare.c, 447]   couch_ejson_compare.c

evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 214]           main.cpp
    Pointer [main.cpp, 376]          main.cpp

evalcx(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 152]             main.c
    Pointer [main.c, 342]            main.c

Evaluate   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 260]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

exit   (Unknown Function)
    Call [util.c, 39]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 48]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 55]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 85]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 88]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 97]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 114]               couch_parse_args(int argc,const char *[] argv)
    Call [main.cpp, 298]             quit(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 461]             main(int argc,const char *[] argv)
    Call [util.cpp, 34]              js_to_string(JSContext *cx,JS::HandleValue val)
    Call [util.cpp, 47]              js_to_string(JSContext *cx,JSString *str)
    Call [util.cpp, 62]              string_to_js(JSContext *cx,const std::string & s)
    Call [util.cpp, 81]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 90]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 97]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 127]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 130]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 139]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 156]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 316]             couch_oom(JSContext *cx,void *data)
    Call [http.c, 32]                http_check_enabled
                                                                     Page 65
                      Program Unit Cross Reference Report
===============================================================================
    Call [http.cpp, 33]              http_check_enabled
    Call [main.c, 241]               quit(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 438]               main(int argc,const char *[] argv)

fflush   (Unknown Function)
    Call [util.c, 230]               couch_print(JSContext *cx,uintN argc,jsval *argv)
    Call [util.cpp, 257]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

fopen   (Unknown Function)
    Call [util.c, 36]                slurp_file(const char *file,char **outbuf_p)
    Call [util.cpp, 78]              couch_readfile(const char *file,char **outbuf_p)

fprintf   (Unknown Function)
    Call [util.c, 38]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 47]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 54]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 84]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 87]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 96]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 113]               couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 225]               couch_print(JSContext *cx,uintN argc,jsval *argv)
    Call [util.c, 244]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.c, 278]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.c, 293]               couch_load_funcs(JSContext *cx,JSObject *obj,JSFunctionSpec *funcs)
    Call [main.cpp, 460]             main(int argc,const char *[] argv)
    Call [main.cpp, 479]             main(int argc,const char *[] argv)
    Call [main.cpp, 487]             main(int argc,const char *[] argv)
    Call [util.cpp, 33]              js_to_string(JSContext *cx,JS::HandleValue val)
    Call [util.cpp, 46]              js_to_string(JSContext *cx,JSString *str)
    Call [util.cpp, 61]              string_to_js(JSContext *cx,const std::string & s)
    Call [util.cpp, 80]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 89]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 96]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 126]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 129]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 138]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 155]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 252]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)
    Call [util.cpp, 270]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [util.cpp, 302]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [util.cpp, 315]             couch_oom(JSContext *cx,void *data)
    Call [util.cpp, 326]             couch_load_funcs(JSContext *cx,JS::HandleObject obj,JSFunctionSpec *funcs)
    Call [http.c, 31]                http_check_enabled
    Call [http.cpp, 32]              http_check_enabled
    Call [main.c, 437]               main(int argc,const char *[] argv)
    Call [main.c, 458]               main(int argc,const char *[] argv)
    Call [main.c, 466]               main(int argc,const char *[] argv)
    Call [main.c, 471]               main(int argc,const char *[] argv)

fputc   (Unknown Function)
    Call [util.c, 229]               couch_print(JSContext *cx,uintN argc,jsval *argv)
    Call [util.cpp, 256]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

fread   (Unknown Function)
    Call [util.c, 43]                slurp_file(const char *file,char **outbuf_p)
    Call [util.cpp, 85]              couch_readfile(const char *file,char **outbuf_p)
                                                                     Page 66
                      Program Unit Cross Reference Report
===============================================================================

free   (Unknown Function)
    Call [util.c, 59]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 206]               couch_readfile(JSContext *cx,const char *filename)
    Call [main.cpp, 483]             main(int argc,const char *[] argv)
    Call [util.cpp, 101]             couch_readfile(const char *file,char **outbuf_p)

gc(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 273]           main.cpp
    Pointer [main.cpp, 377]          main.cpp

gc(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 217]             main.c
    Pointer [main.c, 343]            main.c

get   (Unknown Member Function)
    Call [utf8.cpp, 147]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [main.cpp, 238]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [util.cpp, 37]              js_to_string(JSContext *cx,JS::HandleValue val)
    Call [util.cpp, 50]              js_to_string(JSContext *cx,JSString *str)
    Call [util.cpp, 250]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

get_child_cmdline(int argc,char **argv)   (Function)
  Declared as: char *
    Define [couchspawnkillable_win.c, 28]   couchspawnkillable_win.c
    Call [couchspawnkillable_win.c, 62]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)

get_collator   (Static Function)
  Declared as: UCollator *
    Declare [couch_ejson_compare.c, 66]   couch_ejson_compare.c
    Define [couch_ejson_compare.c, 70]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 105]   less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)

getc   (Unknown Function)
    Call [util.c, 130]               couch_fgets(char *buf,int size,FILE *fp)
    Call [util.cpp, 172]             couch_fgets(char *buf,int size,FILE *fp)

GetCurrentProcess   (Unknown Function)
    Call [couchspawnkillable_win.c, 71]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 73]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 78]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 80]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 87]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 89]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)

GetExitCodeProcess   (Unknown Function)
    Call [couchspawnkillable_win.c, 142]   main(int argc,char **argv)

GetStdHandle   (Unknown Function)
    Call [couchspawnkillable_win.c, 72]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 79]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 88]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [couchspawnkillable_win.c, 135]   main(int argc,char **argv)
                                                                     Page 67
                      Program Unit Cross Reference Report
===============================================================================

global   (Unknown Function)
    Call [main.cpp, 433]             main(int argc,const char *[] argv)
    Pointer [main.cpp, 435]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 438]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 440]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 443]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 450]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 466]          main(int argc,const char *[] argv)

hasDefined   (Unknown Member Function)
    Call [main.cpp, 224]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

http_check_enabled   (Function)
  Declared as: void
    Define [http.cpp, 30]            http.cpp
    Call [main.cpp, 447]             main(int argc,const char *[] argv)
    Declare [http.h, 18]             http.h

http_check_enabled   (Function)
  Declared as: void
    Define [http.c, 29]              http.c
    Declare [http.h, 18]             http.h
    Call [main.c, 424]               main(int argc,const char *[] argv)

http_ctor(JSContext *cx,JSObject *req)   (Function)
  Declared as: JSBool
    Define [http.c, 37]              http.c
    Declare [http.h, 19]             http.h
    Call [main.c, 62]                req_ctor(JSContext *cx,uintN argc,jsval *vp)

http_ctor(JSContext *cx,JSObject *req)   (Function)
  Declared as: bool
    Define [http.cpp, 38]            http.cpp

http_dtor(JSContext *cx,JSObject *req)   (Function)
  Declared as: JSBool
    Define [http.c, 44]              http.c
    Declare [http.h, 20]             http.h
    Call [main.c, 71]                req_dtor(JSContext *cx,JSObject *obj)

http_dtor(JSFreeOp *fop,JSObject *req)   (Function)
  Declared as: void
    Define [http.cpp, 45]            http.cpp

http_open(JSContext *cx,JSObject *req,jsval mth,jsval url,jsval snc)   (Function)
  Declared as: JSBool
    Define [http.c, 51]              http.c
    Declare [http.h, 21]             http.h
    Call [main.c, 83]                req_open(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 85]                req_open(JSContext *cx,uintN argc,jsval *vp)

http_open(JSContext *cx,JSObject *req,JS::Value mth,JS::Value url,JS::Value snc)   (Function)
  Declared as: bool
    Define [http.cpp, 52]            http.cpp
                                                                     Page 68
                      Program Unit Cross Reference Report
===============================================================================

http_send(JSContext *cx,JSObject *req,jsval body)   (Function)
  Declared as: JSBool
    Define [http.c, 65]              http.c
    Declare [http.h, 23]             http.h
    Call [main.c, 121]               req_send(JSContext *cx,uintN argc,jsval *vp)

http_send(JSContext *cx,JSObject *req,JS::Value body)   (Function)
  Declared as: bool
    Define [http.cpp, 66]            http.cpp

http_set_hdr(JSContext *cx,JSObject *req,jsval name,jsval val)   (Function)
  Declared as: JSBool
    Define [http.c, 58]              http.c
    Declare [http.h, 22]             http.h
    Call [main.c, 103]               req_set_hdr(JSContext *cx,uintN argc,jsval *vp)

http_set_hdr(JSContext *cx,JSObject *req,JS::Value name,JS::Value val)   (Function)
  Declared as: bool
    Define [http.cpp, 59]            http.cpp

http_status(JSContext *cx,JSObject *req,jsval body)   (Function)
  Declared as: int
    Define [http.c, 72]              http.c
    Declare [http.h, 24]             http.h
    Call [main.c, 134]               req_status(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)

http_status(JSContext *cx,JSObject *req)   (Function)
  Declared as: int
    Define [http.cpp, 73]            http.cpp

http_uri(JSContext *cx,JSObject *req,couch_args *args,JS::Value *uri_val)   (Function)
  Declared as: bool
    Define [http.cpp, 79]            http.cpp
    Call [main.cpp, 175]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [http.h, 25]             http.h

http_uri(JSContext *cx,JSObject *req,couch_args *args,jsval *uri_val)   (Function)
  Declared as: JSBool
    Define [http.c, 78]              http.c
    Declare [http.h, 25]             http.h
    Call [main.c, 147]               base_url(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)

InitSelfHostedCode   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 423]             main(int argc,const char *[] argv)

initTwoByte   (Unknown Member Function)
    Call [utf8.cpp, 144]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [main.cpp, 233]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

Int32Value   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 164]             req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
                                                                     Page 69
                      Program Unit Cross Reference Report
===============================================================================

INT_TO_JSVAL   (Unknown Function)
    Call [main.c, 138]               req_status(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)

isTrue   (Unknown Member Function)
    Call [util.cpp, 247]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

JS_AddValueRoot   (Unknown Function)
    Call [main.c, 457]               main(int argc,const char *[] argv)

JS_ARGV   (Unknown Function)
    Call [main.c, 79]                req_open(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 99]                req_set_hdr(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 117]               req_send(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 154]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 228]               print(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 238]               quit(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 264]               seal(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 287]               js_sleep(JSContext *cx,uintN argc,jsval *vp)

JS_BeginRequest   (Unknown Function)
    Call [main.cpp, 229]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 177]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 407]               main(int argc,const char *[] argv)

JS_CallFunctionValue   (Unknown Function)
    Call [util.c, 274]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 298]             couch_error(JSContext *cx,JSErrorReport *report)

JS_ClearContextThread   (Unknown Function)
    Call [main.c, 210]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 483]               main(int argc,const char *[] argv)

JS_ClearPendingException   (Unknown Function)
    Call [util.c, 252]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 32]              js_to_string(JSContext *cx,JS::HandleValue val)
    Call [util.cpp, 45]              js_to_string(JSContext *cx,JSString *str)
    Call [util.cpp, 278]             couch_error(JSContext *cx,JSErrorReport *report)

JS_CompileScript   (Unknown Function)
    Call [main.cpp, 478]             main(int argc,const char *[] argv)

JS_CompileUCScript   (Unknown Function)
    Call [main.c, 463]               main(int argc,const char *[] argv)

JS_ConvertArguments   (Unknown Function)
    Call [main.c, 167]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 240]               quit(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 269]               seal(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 289]               js_sleep(JSContext *cx,uintN argc,jsval *vp)

JS_DeepFreezeObject   (Unknown Function)
    Call [main.cpp, 332]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 278]               seal(JSContext *cx,uintN argc,jsval *vp)
                                                                     Page 70
                      Program Unit Cross Reference Report
===============================================================================

JS_DefineFunction   (Unknown Function)
    Call [util.c, 292]               couch_load_funcs(JSContext *cx,JSObject *obj,JSFunctionSpec *funcs)
    Call [util.cpp, 325]             couch_load_funcs(JSContext *cx,JS::HandleObject obj,JSFunctionSpec *funcs)

JS_DefineProperty   (Unknown Function)
    Call [main.cpp, 202]             NewSandbox(JSContext *cx,bool lazy)

JS_DestroyContext   (Unknown Function)
    Call [main.c, 211]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 484]               main(int argc,const char *[] argv)

JS_DestroyRuntime   (Unknown Function)
    Call [main.c, 485]               main(int argc,const char *[] argv)

JS_EncodeString   (Unknown Function)
    Call [util.cpp, 43]              js_to_string(JSContext *cx,JSString *str)
    Call [util.cpp, 251]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

JS_EncodeStringToUTF8   (Unknown Function)
    Call [util.cpp, 30]              js_to_string(JSContext *cx,JS::HandleValue val)

JS_EndRequest   (Unknown Function)
    Call [main.c, 210]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 483]               main(int argc,const char *[] argv)

JS_EnterCrossCompartmentCall   (Unknown Function)
    Call [main.c, 185]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 413]               main(int argc,const char *[] argv)

JS_EvaluateUCScript   (Unknown Function)
    Call [main.c, 201]               evalcx(JSContext *cx,uintN argc,jsval *vp)

JS_ExecuteScript   (Unknown Function)
    Call [main.cpp, 486]             main(int argc,const char *[] argv)
    Call [main.c, 470]               main(int argc,const char *[] argv)

JS_FireOnNewGlobalObject   (Unknown Function)
    Call [main.cpp, 205]             NewSandbox(JSContext *cx,bool lazy)

JS_FN   (Unknown Function)
    Call [main.cpp, 362]             main.cpp
    Call [main.cpp, 363]             main.cpp
    Call [main.cpp, 364]             main.cpp
    Call [main.cpp, 370]             main.cpp
    Call [main.cpp, 376]             main.cpp
    Call [main.cpp, 377]             main.cpp
    Call [main.cpp, 378]             main.cpp
    Call [main.cpp, 379]             main.cpp
    Call [main.cpp, 380]             main.cpp
    Call [main.cpp, 381]             main.cpp

JS_free   (Unknown Function)
    Call [util.c, 168]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.c, 177]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.c, 184]               couch_readline(JSContext *cx,FILE *fp)
                                                                     Page 71
                      Program Unit Cross Reference Report
===============================================================================
    Call [util.c, 191]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.c, 226]               couch_print(JSContext *cx,uintN argc,jsval *argv)
    Call [util.c, 279]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [utf8.c, 157]               enc_string(JSContext *cx,jsval arg,size_t *buflen)
    Call [utf8.c, 292]               dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [utf8.cpp, 161]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [utf8.cpp, 296]             dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [util.cpp, 212]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 221]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 228]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 235]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 253]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)
    Call [util.cpp, 303]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [main.c, 208]               evalcx(JSContext *cx,uintN argc,jsval *vp)

JS_FreezeObject   (Unknown Function)
    Call [main.cpp, 332]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 278]               seal(JSContext *cx,uintN argc,jsval *vp)

JS_FS   (Unknown Function)
    Call [main.c, 328]               main.c
    Call [main.c, 329]               main.c
    Call [main.c, 330]               main.c
    Call [main.c, 336]               main.c
    Call [main.c, 342]               main.c
    Call [main.c, 343]               main.c
    Call [main.c, 344]               main.c
    Call [main.c, 345]               main.c
    Call [main.c, 346]               main.c
    Call [main.c, 347]               main.c

JS_GC   (Unknown Function)
    Call [main.cpp, 276]             gc(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 219]               gc(JSContext *cx,uintN argc,jsval *vp)

JS_GetContextPrivate   (Unknown Function)
    Call [main.cpp, 173]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 389]             csp_allows(JSContext *cx)
    Call [main.c, 146]               base_url(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)
    Call [main.c, 355]               csp_allows(JSContext *cx)

JS_GetEmptyStringValue   (Unknown Function)
    Call [util.c, 178]               couch_readline(JSContext *cx,FILE *fp)

JS_GetGlobalObject   (Unknown Function)
    Call [main.c, 183]               evalcx(JSContext *cx,uintN argc,jsval *vp)

JS_GetPendingException   (Unknown Function)
    Call [util.c, 248]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 274]             couch_error(JSContext *cx,JSErrorReport *report)

JS_GetProperty   (Unknown Function)
    Call [util.c, 262]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.c, 273]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 285]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [util.cpp, 297]             couch_error(JSContext *cx,JSErrorReport *report)
                                                                     Page 72
                      Program Unit Cross Reference Report
===============================================================================

JS_GetRuntime   (Unknown Function)
    Call [main.c, 171]               evalcx(JSContext *cx,uintN argc,jsval *vp)

JS_GetStringChars   (Unknown Function)
    Call [utf8.c, 142]               enc_string(JSContext *cx,jsval arg,size_t *buflen)

JS_GetStringCharsAndLength   (Unknown Function)
    Call [main.c, 179]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 453]               main(int argc,const char *[] argv)

JS_GetStringLength   (Unknown Function)
    Call [utf8.c, 143]               enc_string(JSContext *cx,jsval arg,size_t *buflen)
    Call [utf8.cpp, 148]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)

JS_Init   (Unknown Function)
    Call [main.cpp, 415]             main(int argc,const char *[] argv)

JS_InitClass   (Unknown Function)
    Call [main.cpp, 449]             main(int argc,const char *[] argv)
    Call [main.c, 426]               main(int argc,const char *[] argv)

JS_InitStandardClasses   (Unknown Function)
    Call [main.cpp, 198]             NewSandbox(JSContext *cx,bool lazy)
    Call [main.cpp, 440]             main(int argc,const char *[] argv)
    Call [main.c, 189]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 417]               main(int argc,const char *[] argv)

JS_InternString   (Unknown Function)
    Call [util.c, 269]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)

JS_LeaveCrossCompartmentCall   (Unknown Function)
    Call [main.c, 209]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 482]               main(int argc,const char *[] argv)

JS_malloc   (Unknown Function)
    Call [util.c, 153]               couch_readline(JSContext *cx,FILE *fp)
    Call [utf8.c, 148]               enc_string(JSContext *cx,jsval arg,size_t *buflen)
    Call [utf8.c, 280]               dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [utf8.cpp, 152]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [utf8.cpp, 284]             dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [util.cpp, 196]             couch_readline(JSContext *cx,FILE *fp)

JS_MaybeGC   (Unknown Function)
    Call [main.cpp, 309]             readline(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 492]             main(int argc,const char *[] argv)
    Call [main.c, 251]               readline(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 479]               main(int argc,const char *[] argv)

JS_NewCompartmentAndGlobalObject   (Unknown Function)
    Call [main.c, 409]               main(int argc,const char *[] argv)

JS_NewContext   (Unknown Function)
    Call [main.cpp, 416]             main(int argc,const char *[] argv)
    Call [main.c, 171]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 394]               main(int argc,const char *[] argv)
                                                                     Page 73
                      Program Unit Cross Reference Report
===============================================================================

JS_NewGlobalObject   (Unknown Function)
    Call [main.cpp, 191]             NewSandbox(JSContext *cx,bool lazy)
    Call [main.cpp, 433]             main(int argc,const char *[] argv)
    Call [main.c, 188]               evalcx(JSContext *cx,uintN argc,jsval *vp)

JS_NewObjectForConstructor   (Unknown Function)
    Call [main.cpp, 89]              req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 57]                req_ctor(JSContext *cx,uintN argc,jsval *vp)

JS_NewRegExpObject   (Unknown Function)
    Call [util.c, 263]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 286]             couch_error(JSContext *cx,JSErrorReport *report)

JS_NewRuntime   (Unknown Function)
    Call [main.c, 390]               main(int argc,const char *[] argv)

JS_NewStringCopyN   (Unknown Function)
    Call [util.cpp, 56]              string_to_js(JSContext *cx,const std::string & s)

JS_NewStringCopyZ   (Unknown Function)
    Call [util.cpp, 222]             couch_readline(JSContext *cx,FILE *fp)

JS_NewUCString   (Unknown Function)
    Call [utf8.c, 286]               dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    Call [utf8.cpp, 290]             dec_string(JSContext *cx,const char *bytes,size_t byteslen)

JS_PSG   (Unknown Function)
    Call [main.cpp, 355]             main.cpp
    Call [main.cpp, 356]             main.cpp

JS_realloc   (Unknown Function)
    Call [util.c, 166]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.c, 182]               couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 210]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 226]             couch_readline(JSContext *cx,FILE *fp)

JS_RemoveValueRoot   (Unknown Function)
    Call [main.c, 476]               main(int argc,const char *[] argv)

JS_ReportError   (Unknown Function)
    Call [main.c, 59]                req_ctor(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 87]                req_open(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 105]               req_set_hdr(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 123]               req_send(JSContext *cx,uintN argc,jsval *vp)

JS_ReportErrorUTF8   (Unknown Function)
    Call [main.cpp, 91]              req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 111]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 129]             req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 147]             req_send(JSContext *cx,unsigned int argc,JS::Value *vp)

JS_ReportOutOfMemory   (Unknown Function)
    Call [main.c, 173]               evalcx(JSContext *cx,uintN argc,jsval *vp)
                                                                     Page 74
                      Program Unit Cross Reference Report
===============================================================================

JS_RVAL   (Unknown Function)
    Call [main.c, 147]               base_url(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)

JS_SET_RVAL   (Unknown Function)
    Call [main.c, 63]                req_ctor(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 90]                req_open(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 108]               req_set_hdr(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 126]               req_send(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 138]               req_status(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)
    Call [main.c, 199]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 202]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 220]               gc(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 230]               print(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 256]               readline(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 273]               seal(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 279]               seal(JSContext *cx,uintN argc,jsval *vp)

JS_SetContextPrivate   (Unknown Function)
    Call [main.cpp, 428]             main(int argc,const char *[] argv)
    Call [main.c, 404]               main(int argc,const char *[] argv)

JS_SetContextThread   (Unknown Function)
    Call [main.c, 177]               evalcx(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 407]               main(int argc,const char *[] argv)

JS_SetErrorReporter   (Unknown Function)
    Call [main.c, 398]               main(int argc,const char *[] argv)

JS_SetGlobalJitCompilerOption   (Unknown Function)
    Call [main.cpp, 420]             main(int argc,const char *[] argv)
    Call [main.cpp, 421]             main(int argc,const char *[] argv)

JS_SetGlobalObject   (Unknown Function)
    Call [main.c, 415]               main(int argc,const char *[] argv)

JS_SetOptions   (Unknown Function)
    Call [main.c, 400]               main(int argc,const char *[] argv)

JS_SetRuntimeSecurityCallbacks   (Unknown Function)
    Call [main.c, 405]               main(int argc,const char *[] argv)

JS_SetSecurityCallbacks   (Unknown Function)
    Call [main.cpp, 429]             main(int argc,const char *[] argv)

JS_ShutDown   (Unknown Function)
    Call [main.c, 486]               main(int argc,const char *[] argv)

js_sleep(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 339]           main.cpp
    Pointer [main.cpp, 370]          main.cpp

js_sleep(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 285]             main.c
                                                                     Page 75
                      Program Unit Cross Reference Report
===============================================================================
    Pointer [main.c, 336]            main.c

JS_THIS_OBJECT   (Unknown Function)
    Call [main.cpp, 102]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 122]             req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 140]             req_send(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 158]             req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 172]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 78]                req_open(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 98]                req_set_hdr(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 116]               req_send(JSContext *cx,uintN argc,jsval *vp)

js_to_string(JSContext *cx,JS::HandleValue val)   (Function)
  Declared as: std::string
    Define [util.cpp, 25]            util.cpp
    Declare [util.h, 28]             util.h

js_to_string(JSContext *cx,JSString *str)   (Function)
  Declared as: std::string
    Define [util.cpp, 41]            util.cpp
    Declare [util.h, 29]             util.h

JS_ToggleOptions   (Unknown Function)
    Call [main.c, 399]               main(int argc,const char *[] argv)

JS_ValueToObject   (Unknown Function)
    Call [util.c, 272]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)

JS_ValueToString   (Unknown Function)
    Call [utf8.c, 136]               enc_string(JSContext *cx,jsval arg,size_t *buflen)

JS_WrapObject   (Unknown Function)
    Call [main.cpp, 208]             NewSandbox(JSContext *cx,bool lazy)

JS_WrapValue   (Unknown Function)
    Call [main.cpp, 265]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

JSCLASS_HAS_RESERVED_SLOTS   (Unknown Function)
    Call [main.cpp, 80]              main.cpp
    Call [main.c, 307]               main.c

JSREPORT_IS_EXCEPTION   (Unknown Function)
    Call [util.c, 247]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 273]             couch_error(JSContext *cx,JSErrorReport *report)

JSREPORT_IS_WARNING   (Unknown Function)
    Call [util.c, 242]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [util.cpp, 268]             couch_error(JSContext *cx,JSErrorReport *report)

JSVAL_TO_OBJECT   (Unknown Function)
    Call [util.c, 262]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)

JSVAL_TO_STRING   (Unknown Function)
    Call [util.c, 178]               couch_readline(JSContext *cx,FILE *fp)
                                                                     Page 76
                      Program Unit Cross Reference Report
===============================================================================

length   (Unknown Member Function)
    Call [main.cpp, 237]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 61]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 107]   less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)
    Define [couch_ejson_compare.c, 124]   couch_ejson_compare.c
    Call [couch_ejson_compare.c, 281]   compare_lists(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    Call [couch_ejson_compare.c, 345]   compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)

less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)   (Static Function)
  Declared as: ERL_NIF_TERM
    Declare [couch_ejson_compare.c, 58]   couch_ejson_compare.c
    Define [couch_ejson_compare.c, 98]   couch_ejson_compare.c
    Pointer [couch_ejson_compare.c, 439]   couch_ejson_compare.c

main(int argc,const char *[] argv)   (Function)
  Declared as: int
    Define [main.cpp, 405]           main.cpp

main(int argc,char **argv)   (Function)
  Declared as: int
    Define [couchspawnkillable_win.c, 111]   couchspawnkillable_win.c

main(int argc,const char *[] argv)   (Function)
  Declared as: int
    Define [main.c, 373]             main.c

malloc   (Unknown Function)
    Call [couchspawnkillable_win.c, 38]   get_child_cmdline(int argc,char **argv)
    Call [util.c, 45]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 52]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 75]                couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 87]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 94]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 117]             couch_parse_args(int argc,const char *[] argv)

memcpy   (Unknown Function)
    Call [util.c, 50]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 57]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 58]                slurp_file(const char *file,char **outbuf_p)
    Call [couch_icu_driver.c, 93]    return_control_result(void *pLocalResult,int localLen,char **ppRetBuf,ErlDrvSizeT returnLen)
    Call [couch_icu_driver.c, 121]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [couch_icu_driver.c, 130]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [util.cpp, 92]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 99]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 100]             couch_readfile(const char *file,char **outbuf_p)

memset   (Unknown Function)
    Call [couchspawnkillable_win.c, 66]   create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    Call [util.c, 79]                couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 121]             couch_parse_args(int argc,const char *[] argv)
                                                                     Page 77
                      Program Unit Cross Reference Report
===============================================================================

message   (Unknown Member Function)
    Call [util.cpp, 270]             couch_error(JSContext *cx,JSErrorReport *report)

NewSandbox(JSContext *cx,bool lazy)   (Static Function)
  Declared as: JSObject *
    Define [main.cpp, 187]           main.cpp
    Call [main.cpp, 241]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

obj   (Unknown Function)
    Call [main.cpp, 191]             NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 193]          NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 197]          NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 198]          NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 202]          NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 205]          NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 208]          NewSandbox(JSContext *cx,bool lazy)
    Return [main.cpp, 210]           NewSandbox(JSContext *cx,bool lazy)

OBJECT_TO_JSVAL   (Unknown Function)
    Call [util.c, 268]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [main.c, 63]                req_ctor(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 199]               evalcx(JSContext *cx,uintN argc,jsval *vp)

ObjectValue   (Unknown Member Function)
    Declare [util.cpp, 0]            JS
    Call [util.cpp, 291]             couch_error(JSContext *cx,JSErrorReport *report)

on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)   (Static Function)
  Declared as: int
    Declare [couch_ejson_compare.c, 59]   couch_ejson_compare.c
    Define [couch_ejson_compare.c, 384]   couch_ejson_compare.c

on_unload(ErlNifEnv *env,void *priv_data)   (Static Function)
  Declared as: void
    Declare [couch_ejson_compare.c, 60]   couch_ejson_compare.c
    Define [couch_ejson_compare.c, 418]   couch_ejson_compare.c

OpenProcess   (Unknown Function)
    Call [couchspawnkillable_win.c, 119]   main(int argc,char **argv)

opts   (Unknown Function)
    Call [main.cpp, 257]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 259]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 260]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

print(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 283]           main.cpp
    Pointer [main.cpp, 378]          main.cpp

print(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 226]             main.c
    Pointer [main.c, 344]            main.c
                                                                     Page 78
                      Program Unit Cross Reference Report
===============================================================================

quit(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 293]           main.cpp
    Pointer [main.cpp, 379]          main.cpp

quit(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 236]             main.c
    Pointer [main.c, 345]            main.c

rawChars   (Unknown Function)
    Call [utf8.cpp, 139]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Pointer [utf8.cpp, 144]          enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Pointer [utf8.cpp, 147]          enc_string(JSContext *cx,JS::Value arg,size_t *buflen)

re_args   (Unknown Function)
    Call [util.cpp, 290]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 294]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 294]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 298]          couch_error(JSContext *cx,JSErrorReport *report)

readline(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 303]           main.cpp
    Pointer [main.cpp, 380]          main.cpp

readline(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 246]             main.c
    Pointer [main.c, 346]            main.c

replace   (Unknown Function)
    Call [util.cpp, 264]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 297]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 298]          couch_error(JSContext *cx,JSErrorReport *report)

req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 85]            main.cpp
    Pointer [main.cpp, 452]          main(int argc,const char *[] argv)

req_ctor(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 54]              main.c
    Pointer [main.c, 429]            main(int argc,const char *[] argv)

req_dtor(JSFreeOp *fop,JSObject *obj)   (Static Function)
  Declared as: void
    Define [main.cpp, 59]            main.cpp
    Pointer [main.cpp, 72]           main.cpp

req_dtor(JSContext *cx,JSObject *obj)   (Static Function)
  Declared as: void
    Define [main.c, 69]              main.c
    Pointer [main.c, 315]            main.c
                                                                     Page 79
                      Program Unit Cross Reference Report
===============================================================================

req_open(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 100]           main.cpp
    Pointer [main.cpp, 362]          main.cpp

req_open(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 76]              main.c
    Pointer [main.c, 328]            main.c

req_send(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 138]           main.cpp
    Pointer [main.cpp, 364]          main.cpp

req_send(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 114]             main.c
    Pointer [main.c, 330]            main.c

req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 120]           main.cpp
    Pointer [main.cpp, 363]          main.cpp

req_set_hdr(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 96]              main.c
    Pointer [main.c, 329]            main.c

req_status(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 155]           main.cpp
    Pointer [main.cpp, 355]          main.cpp

req_status(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 132]             main.c
    Pointer [main.c, 321]            main.c

result   (Unknown Function)
    Call [main.cpp, 485]             main(int argc,const char *[] argv)
    Pointer [main.cpp, 486]          main(int argc,const char *[] argv)

ResumeThread   (Unknown Function)
    Call [couchspawnkillable_win.c, 138]   main(int argc,char **argv)

return_control_result(void *pLocalResult,int localLen,char **ppRetBuf,ErlDrvSizeT returnLen)   (Function)
  Declared as: ErlDrvSSizeT
    Define [couch_icu_driver.c, 84]   couch_icu_driver.c
    Call [couch_icu_driver.c, 148]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)

rval   (Unknown Member Function)
    Call [main.cpp, 95]              req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 114]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
                                                                     Page 80
                      Program Unit Cross Reference Report
===============================================================================
    Call [main.cpp, 132]             req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 150]             req_send(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 164]             req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 176]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 247]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 260]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 265]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 277]             gc(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 287]             print(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 315]             readline(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 327]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 333]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)

rval   (Unknown Function)
    Call [main.cpp, 258]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

sandbox   (Unknown Function)
    Call [main.cpp, 223]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 226]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 240]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 242]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 247]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 251]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 254]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

script   (Unknown Function)
    Call [main.cpp, 476]             main(int argc,const char *[] argv)
    Pointer [main.cpp, 478]          main(int argc,const char *[] argv)
    Pointer [main.cpp, 486]          main(int argc,const char *[] argv)

seal(JSContext *cx,unsigned int argc,JS::Value *vp)   (Static Function)
  Declared as: bool
    Define [main.cpp, 321]           main.cpp
    Pointer [main.cpp, 381]          main.cpp

seal(JSContext *cx,uintN argc,jsval *vp)   (Static Function)
  Declared as: JSBool
    Define [main.c, 262]             main.c
    Pointer [main.c, 347]            main.c

set   (Unknown Member Function)
    Call [main.cpp, 164]             req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 176]             base_url(JSContext *cx,unsigned int argc,JS::Value *vp)

setFileAndLine   (Unknown Member Function)
    Call [main.cpp, 259]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 475]             main(int argc,const char *[] argv)

setObject   (Unknown Member Function)
    Call [main.cpp, 95]              req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 247]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

SetOutOfMemoryCallback   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 427]             main(int argc,const char *[] argv)
                                                                     Page 81
                      Program Unit Cross Reference Report
===============================================================================

setSharedMemoryAndAtomicsEnabled   (Unknown Member Function)
    Call [main.cpp, 183]             SetStandardCompartmentOptions(JS::CompartmentOptions & options)

SetStandardCompartmentOptions(JS::CompartmentOptions & options)   (Static Function)
  Declared as: void
    Define [main.cpp, 181]           main.cpp
    Call [main.cpp, 190]             NewSandbox(JSContext *cx,bool lazy)

setString   (Unknown Member Function)
    Call [main.cpp, 315]             readline(JSContext *cx,unsigned int argc,JS::Value *vp)

setUndefined   (Unknown Member Function)
    Call [main.cpp, 114]             req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 132]             req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 150]             req_send(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 277]             gc(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 287]             print(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 327]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 333]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)

SetWarningReporter   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 426]             main(int argc,const char *[] argv)

size   (Unknown Member Function)
    Call [util.cpp, 56]              string_to_js(JSContext *cx,const std::string & s)

slurp_file(const char *file,char **outbuf_p)   (Function)
  Declared as: size_t
    Define [util.c, 24]              util.c
    Call [util.c, 203]               couch_readfile(JSContext *cx,const char *filename)

sobj   (Unknown Function)
    Call [util.cpp, 296]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 297]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 298]          couch_error(JSContext *cx,JSErrorReport *report)

sprintf_s   (Unknown Function)
    Call [couchspawnkillable_win.c, 133]   main(int argc,char **argv)

stack   (Unknown Function)
    Call [util.cpp, 264]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 285]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 296]          couch_error(JSContext *cx,JSErrorReport *report)

str   (Unknown Function)
    Call [main.cpp, 219]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 220]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 233]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

strChars   (Unknown Function)
    Call [main.cpp, 232]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 233]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 236]          evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
                                                                     Page 82
                      Program Unit Cross Reference Report
===============================================================================

strcmp   (Unknown Function)
    Call [couchspawnkillable_win.c, 118]   main(int argc,char **argv)
    Call [util.c, 33]                slurp_file(const char *file,char **outbuf_p)
    Call [util.c, 83]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 86]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 89]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 91]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 93]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 99]                couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 101]               couch_parse_args(int argc,const char *[] argv)
    Call [util.c, 103]               couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 75]              couch_readfile(const char *file,char **outbuf_p)
    Call [util.cpp, 125]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 128]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 131]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 133]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 135]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 141]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 143]             couch_parse_args(int argc,const char *[] argv)
    Call [util.cpp, 145]             couch_parse_args(int argc,const char *[] argv)

string_to_js(JSContext *cx,const std::string & s)   (Function)
  Declared as: JSString *
    Define [util.cpp, 54]            util.cpp
    Call [util.cpp, 234]             couch_readline(JSContext *cx,FILE *fp)
    Call [util.cpp, 292]             couch_error(JSContext *cx,JSErrorReport *report)
    Declare [util.h, 30]             util.h

STRING_TO_JSVAL   (Unknown Function)
    Call [util.c, 269]               couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    Call [main.c, 256]               readline(JSContext *cx,uintN argc,jsval *vp)
    Call [main.c, 456]               main(int argc,const char *[] argv)

StringValue   (Unknown Member Function)
    Declare [util.cpp, 0]            JS
    Call [util.cpp, 292]             couch_error(JSContext *cx,JSErrorReport *report)

strlen   (Unknown Function)
    Call [couchspawnkillable_win.c, 37]   get_child_cmdline(int argc,char **argv)
    Call [couchspawnkillable_win.c, 42]   get_child_cmdline(int argc,char **argv)
    Call [couchspawnkillable_win.c, 135]   main(int argc,char **argv)

strncpy   (Unknown Function)
    Call [couchspawnkillable_win.c, 43]   get_child_cmdline(int argc,char **argv)

sval   (Unknown Function)
    Call [util.cpp, 27]              js_to_string(JSContext *cx,JS::HandleValue val)
    Pointer [util.cpp, 30]           js_to_string(JSContext *cx,JS::HandleValue val)

target   (Unknown Function)
    Call [main.cpp, 324]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 326]          seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 332]          seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    Pointer [main.cpp, 332]          seal(JSContext *cx,unsigned int argc,JS::Value *vp)
                                                                     Page 83
                      Program Unit Cross Reference Report
===============================================================================

TerminateProcess   (Unknown Function)
    Call [couchspawnkillable_win.c, 122]   main(int argc,char **argv)

toBoolean   (Unknown Member Function)
    Call [main.cpp, 331]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)

toInt32   (Unknown Member Function)
    Call [main.cpp, 297]             quit(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.cpp, 343]             js_sleep(JSContext *cx,unsigned int argc,JS::Value *vp)

ToObject   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 225]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 325]             seal(JSContext *cx,unsigned int argc,JS::Value *vp)

toObjectOrNull   (Unknown Member Function)
    Call [util.cpp, 283]             couch_error(JSContext *cx,JSErrorReport *report)
    Call [util.cpp, 296]             couch_error(JSContext *cx,JSErrorReport *report)

toString   (Unknown Member Function)
    Call [utf8.cpp, 141]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [util.cpp, 28]              js_to_string(JSContext *cx,JS::HandleValue val)

ToString   (Unknown Member Function)
    Declare [main.cpp, 0]            JS
    Call [main.cpp, 219]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    Declare [util.cpp, 0]            JS
    Call [util.cpp, 250]             couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)

twoByteRange   (Unknown Member Function)
    Call [utf8.cpp, 147]             enc_string(JSContext *cx,JS::Value arg,size_t *buflen)
    Call [main.cpp, 236]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

U_FAILURE   (Unknown Function)
    Call [couch_icu_driver.c, 63]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_icu_driver.c, 69]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_icu_driver.c, 75]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_ejson_compare.c, 80]   get_collator
    Call [couch_ejson_compare.c, 371]   compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)

ucol_close   (Unknown Function)
    Call [couch_icu_driver.c, 44]    couch_drv_stop(ErlDrvData data)
    Call [couch_icu_driver.c, 47]    couch_drv_stop(ErlDrvData data)
    Call [couch_ejson_compare.c, 81]   get_collator
    Call [couch_ejson_compare.c, 424]   on_unload(ErlNifEnv *env,void *priv_data)

ucol_open   (Unknown Function)
    Call [couch_icu_driver.c, 62]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_icu_driver.c, 68]    couch_drv_start(ErlDrvPort port,char *buff)
    Call [couch_ejson_compare.c, 78]   get_collator

ucol_setAttribute   (Unknown Function)
    Call [couch_icu_driver.c, 74]    couch_drv_start(ErlDrvPort port,char *buff)
                                                                     Page 84
                      Program Unit Cross Reference Report
===============================================================================

ucol_strcollIter   (Unknown Function)
    Call [couch_icu_driver.c, 137]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [couch_icu_driver.c, 139]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [couch_ejson_compare.c, 369]   compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)

uiter_setUTF8   (Unknown Function)
    Call [couch_icu_driver.c, 125]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [couch_icu_driver.c, 134]   couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    Call [couch_ejson_compare.c, 366]   compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)
    Call [couch_ejson_compare.c, 367]   compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)

UncheckedUnwrap   (Unknown Function)
    Call [main.cpp, 251]             evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)

usleep   (Unknown Function)
    Call [main.cpp, 348]             js_sleep(JSContext *cx,unsigned int argc,JS::Value *vp)
    Call [main.c, 296]               js_sleep(JSContext *cx,uintN argc,jsval *vp)

v   (Unknown Function)
    Call [util.cpp, 264]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 274]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 283]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 298]          couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 301]          couch_error(JSContext *cx,JSErrorReport *report)

value   (Unknown Function)
    Call [main.cpp, 201]             NewSandbox(JSContext *cx,bool lazy)
    Pointer [main.cpp, 202]          NewSandbox(JSContext *cx,bool lazy)

vobj   (Unknown Function)
    Call [util.cpp, 283]             couch_error(JSContext *cx,JSErrorReport *report)
    Pointer [util.cpp, 285]          couch_error(JSContext *cx,JSErrorReport *report)

WaitForSingleObject   (Unknown Function)
    Call [couchspawnkillable_win.c, 141]   main(int argc,char **argv)

WriteFile   (Unknown Function)
    Call [couchspawnkillable_win.c, 135]   main(int argc,char **argv)
