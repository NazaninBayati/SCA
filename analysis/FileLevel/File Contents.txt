                                                                     Page 56
                              File Contents Report
===============================================================================

couch_ejson_compare.c
  Types
    ctx_t
  Local Variables
    ATOM_FALSE
    ATOM_NULL
    ATOM_TRUE
    collator
    collators
    collMutex
    loadEpoch
    nif_functions
    numCollators
    numSchedulers
    threadEpoch
  Global Variables
    aArity
    aArity
    aIsAtom
    aIsBin
    aIsEmpty
    aIsEmpty
    aIsList
    aIsNumber
    aKV
    aProps
    aSortOrd
    bArity
    bArity
    binA
    binB
    bIsAtom
    bIsBin
    bIsEmpty
    bIsEmpty
    bIsList
    bIsNumber
    bKV
    bProps
    bSortOrd
    coll
    ctx
    env
    error
    headA
    headA
    headB
    headB
    i
    iterA
    iterB
    keyA
    keyB
    keyCompResult
    result
    result
    result
    status
    status
    tailA
    tailA
    tailB
    tailB
    valueCompResult
  Local Functions
    atom_sort_order(ErlNifEnv *env,ERL_NIF_TERM a)
    compare_lists(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    compare_props(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    compare_strings(ctx_t *ctx,ErlNifBinary a,ErlNifBinary b)
    get_collator
    less_json(int depth,ctx_t *ctx,ERL_NIF_TERM a,ERL_NIF_TERM b)
    less_json_nif(ErlNifEnv *env,int argc,const ERL_NIF_TERM [] argv)
    on_load(ErlNifEnv *env,void **priv,ERL_NIF_TERM info)
    on_unload(ErlNifEnv *env,void *priv_data)

couch_icu_driver.c
  Types
    couch_drv_data
  Global Variables
    coll
    collNoCase
    collResult
    couch_driver_entry
    iterA
    iterB
    length
    pData
    pData
    pData
    port
    response
    status
    status
  Local Functions
    couch_drv_control(ErlDrvData drv_data,unsigned int command,char *pBuf,ErlDrvSizeT bufLen,char **rbuf,ErlDrvSizeT rlen)
    couch_drv_start(ErlDrvPort port,char *buff)
    couch_drv_stop(ErlDrvData data)
  Global Functions
    DRIVER_INIT( couch_icu_driver)
    return_control_result(void *pLocalResult,int localLen,char **ppRetBuf,ErlDrvSizeT returnLen)

couchspawnkillable_win.c
  Global Variables
    buf
    cbwritten
    cmdline
    cmdline
    dwcreate
    exitcode
    h
    i
    nchars
    nthis
    out_buf
    p
    pi
    rc
    si
  Global Functions
    create_child(int argc,char **argv,PROCESS_INFORMATION *pi)
    get_child_cmdline(int argc,char **argv)
    main(int argc,char **argv)

help.h
  Local Variables
    USAGE_TEMPLATE
    VERSION_TEMPLATE

help.h
  Local Variables
    USAGE_TEMPLATE
    VERSION_TEMPLATE

http.c
  Global Functions
    http_check_enabled
    http_ctor(JSContext *cx,JSObject *req)
    http_dtor(JSContext *cx,JSObject *req)
    http_open(JSContext *cx,JSObject *req,jsval mth,jsval url,jsval snc)
    http_send(JSContext *cx,JSObject *req,jsval body)
    http_set_hdr(JSContext *cx,JSObject *req,jsval name,jsval val)
    http_status(JSContext *cx,JSObject *req,jsval body)
    http_uri(JSContext *cx,JSObject *req,couch_args *args,jsval *uri_val)

http.cpp
  Global Functions
    http_check_enabled
    http_ctor(JSContext *cx,JSObject *req)
    http_dtor(JSFreeOp *fop,JSObject *req)
    http_open(JSContext *cx,JSObject *req,JS::Value mth,JS::Value url,JS::Value snc)
    http_send(JSContext *cx,JSObject *req,JS::Value body)
    http_set_hdr(JSContext *cx,JSObject *req,JS::Value name,JS::Value val)
    http_status(JSContext *cx,JSObject *req)
    http_uri(JSContext *cx,JSObject *req,couch_args *args,JS::Value *uri_val)

http.h
  Global Variables
    http_ctor
    http_dtor
    http_open
    http_send
    http_set_hdr
    http_status
    Value
  Global Functions
    http_check_enabled
    http_uri(JSContext *cx,JSObject *req,couch_args *args,JS::Value *uri_val)

http.h
  Global Functions
    http_check_enabled
    http_ctor(JSContext *cx,JSObject *req)
    http_dtor(JSContext *cx,JSObject *req)
    http_open(JSContext *cx,JSObject *req,jsval mth,jsval url,jsval snc)
    http_send(JSContext *cx,JSObject *req,jsval body)
    http_set_hdr(JSContext *cx,JSObject *req,jsval name,jsval val)
    http_status(JSContext *cx,JSObject *req,jsval body)
    http_uri(JSContext *cx,JSObject *req,couch_args *args,jsval *uri_val)

main.c
  Local Variables
    global_class
    global_functions
    security_callbacks
  Global Variables
    args
    args
    args
    argv
    argv
    argv
    argv
    argv
    argv
    argv
    argv
    call
    call
    CouchHTTPClass
    CouchHTTPFunctions
    CouchHTTPProperties
    cx
    deep
    duration
    exit_code
    global
    global
    i
    klass
    line
    name
    obj
    obj
    obj
    obj
    result
    ret
    ret
    ret
    ret
    ret
    ret
    rt
    rval
    sandbox
    schars
    script
    scriptsrc
    slen
    src
    srclen
    sroot
    status
    str
    subcx
    target
    TestSuiteFunctions
  Local Functions
    base_url(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)
    csp_allows(JSContext *cx)
    evalcx(JSContext *cx,uintN argc,jsval *vp)
    gc(JSContext *cx,uintN argc,jsval *vp)
    js_sleep(JSContext *cx,uintN argc,jsval *vp)
    print(JSContext *cx,uintN argc,jsval *vp)
    quit(JSContext *cx,uintN argc,jsval *vp)
    readline(JSContext *cx,uintN argc,jsval *vp)
    req_ctor(JSContext *cx,uintN argc,jsval *vp)
    req_dtor(JSContext *cx,JSObject *obj)
    req_open(JSContext *cx,uintN argc,jsval *vp)
    req_send(JSContext *cx,uintN argc,jsval *vp)
    req_set_hdr(JSContext *cx,uintN argc,jsval *vp)
    req_status(JSContext *cx,JSObject *obj,jsid pid,jsval *vp)
    seal(JSContext *cx,uintN argc,jsval *vp)
  Global Functions
    main(int argc,const char *[] argv)

main.cpp
  Local Variables
    clsOps
    CouchHTTPClass
    enableSharedMemory
    global_class
    global_functions
    global_ops
    security_callbacks
  Global Variables
    ac
    ac
    ar
    ar
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    args
    cargs
    CouchHTTPFunctions
    CouchHTTPProperties
    cx
    deep
    duration
    exit_code
    flags
    i
    klass
    line
    obj
    obj
    obj
    obj
    obj
    obj
    rc
    ret
    ret
    ret
    ret
    ret
    ret
    scriptsrc
    slen
    src
    srclen
    status
    TestSuiteFunctions
    unwrapped
    uri_val
  Local Functions
    base_url(JSContext *cx,unsigned int argc,JS::Value *vp)
    csp_allows(JSContext *cx)
    evalcx(JSContext *cx,unsigned int argc,JS::Value *vp)
    gc(JSContext *cx,unsigned int argc,JS::Value *vp)
    js_sleep(JSContext *cx,unsigned int argc,JS::Value *vp)
    NewSandbox(JSContext *cx,bool lazy)
    print(JSContext *cx,unsigned int argc,JS::Value *vp)
    quit(JSContext *cx,unsigned int argc,JS::Value *vp)
    readline(JSContext *cx,unsigned int argc,JS::Value *vp)
    req_ctor(JSContext *cx,unsigned int argc,JS::Value *vp)
    req_dtor(JSFreeOp *fop,JSObject *obj)
    req_open(JSContext *cx,unsigned int argc,JS::Value *vp)
    req_send(JSContext *cx,unsigned int argc,JS::Value *vp)
    req_set_hdr(JSContext *cx,unsigned int argc,JS::Value *vp)
    req_status(JSContext *cx,unsigned int argc,JS::Value *vp)
    seal(JSContext *cx,unsigned int argc,JS::Value *vp)
    SetStandardCompartmentOptions(JS::CompartmentOptions & options)
  Global Functions
    main(int argc,const char *[] argv)

utf8.c
  Local Variables
    minucs4Table
  Global Variables
    a
    bytes
    byteslen
    c
    c2
    chars
    charslen
    dstlen
    dstlen
    i
    i
    j
    minucs4Char
    n
    offset
    origDstlen
    origDstlen
    src
    srclen
    str
    str
    ucs4Char
    utf8buf
    utf8Len
    utf8Length
    v
    v
  Local Functions
    dec_char(const uint8 *utf8Buffer,int utf8Length)
    dec_charbuf(const char *src,size_t srclen,jschar *dst,size_t *dstlenp)
    enc_char(uint8 *utf8Buffer,uint32 ucs4Char)
    enc_charbuf(const jschar *src,size_t srclen,char *dst,size_t *dstlenp)
  Global Functions
    dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    enc_string(JSContext *cx,jsval arg,size_t *buflen)

utf8.cpp
  Local Variables
    minucs4Table
  Global Variables
    a
    bytes
    byteslen
    c
    c2
    chars
    charslen
    dstlen
    dstlen
    i
    i
    j
    minucs4Char
    n
    offset
    origDstlen
    origDstlen
    src
    srclen
    str
    str
    ucs4Char
    utf8buf
    utf8Len
    utf8Length
    v
    v
  Local Functions
    dec_char(const uint8_t *utf8Buffer,int utf8Length)
    dec_charbuf(const char *src,size_t srclen,char16_t *dst,size_t *dstlenp)
    enc_char(uint8_t *utf8Buffer,uint32_t ucs4Char)
    enc_charbuf(const char16_t *src,size_t srclen,char *dst,size_t *dstlenp)
  Global Functions
    dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    enc_string(JSContext *cx,JS::Value arg,size_t *buflen)

utf8.h
  Global Functions
    dec_string(JSContext *cx,const char *bytes,size_t byteslen)
    enc_string(JSContext *cx,jsval arg,size_t *buflen)

utf8.h
  Global Variables
    enc_string
    Value
  Global Functions
    dec_string(JSContext *cx,const char *bytes,size_t byteslen)

util.c
  Global Variables
    args
    buf
    buflen
    bytes
    bytes
    bytes
    bytes
    byteslen
    byteslen
    c
    f
    fbuf
    fp
    i
    i
    n
    nread
    re_args
    readlen
    regexp
    replace
    stack
    str
    stream
    string
    tmp
    tmp
    used
    v
  Global Functions
    couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    couch_fgets(char *buf,int size,FILE *fp)
    couch_load_funcs(JSContext *cx,JSObject *obj,JSFunctionSpec *funcs)
    couch_parse_args(int argc,const char *[] argv)
    couch_print(JSContext *cx,uintN argc,jsval *argv)
    couch_readfile(JSContext *cx,const char *filename)
    couch_readline(JSContext *cx,FILE *fp)
    slurp_file(const char *file,char **outbuf_p)

util.cpp
  Global Variables
    arg1
    args
    buf
    buflen
    bytes
    bytes
    bytes
    byteslen
    c
    f
    fbuf
    fp
    i
    i
    n
    nread
    oldbyteslen
    readlen
    regexp
    ret
    str
    str
    stream
    tmp
    tmp
    used
  Global Functions
    couch_error(JSContext *cx,JSErrorReport *report)
    couch_fgets(char *buf,int size,FILE *fp)
    couch_load_funcs(JSContext *cx,JS::HandleObject obj,JSFunctionSpec *funcs)
    couch_oom(JSContext *cx,void *data)
    couch_parse_args(int argc,const char *[] argv)
    couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)
    couch_readfile(const char *file,char **outbuf_p)
    couch_readline(JSContext *cx,FILE *fp)
    js_to_string(JSContext *cx,JS::HandleValue val)
    js_to_string(JSContext *cx,JSString *str)
    string_to_js(JSContext *cx,const std::string & s)

util.h
  Types
    couch_args
  Global Variables
    eval
    scripts
    stack_size
    uri
    uri_file
    use_http
    use_test_funs
  Global Functions
    couch_error(JSContext *cx,const char *mesg,JSErrorReport *report)
    couch_fgets(char *buf,int size,FILE *fp)
    couch_load_funcs(JSContext *cx,JSObject *obj,JSFunctionSpec *funcs)
    couch_parse_args(int argc,const char *[] argv)
    couch_print(JSContext *cx,uintN argc,jsval *argv)
    couch_readfile(JSContext *cx,const char *filename)
    couch_readline(JSContext *cx,FILE *fp)

util.h
  Types
    couch_args
  Global Variables
    eval
    scripts
    stack_size
    uri
    uri_file
    use_http
    use_test_funs
  Global Functions
    couch_error(JSContext *cx,JSErrorReport *report)
    couch_fgets(char *buf,int size,FILE *fp)
    couch_load_funcs(JSContext *cx,JS::HandleObject obj,JSFunctionSpec *funcs)
    couch_oom(JSContext *cx,void *data)
    couch_parse_args(int argc,const char *[] argv)
    couch_print(JSContext *cx,unsigned int argc,JS::CallArgs argv)
    couch_readfile(const char *file,char **outbuf_p)
    couch_readline(JSContext *cx,FILE *fp)
    js_to_string(JSContext *cx,JS::HandleValue val)
    js_to_string(JSContext *cx,JSString *str)
    string_to_js(JSContext *cx,const std::string & s)
